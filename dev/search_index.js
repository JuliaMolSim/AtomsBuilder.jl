var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = AtomsBuilder","category":"page"},{"location":"#AtomsBuilder","page":"Home","title":"AtomsBuilder","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for AtomsBuilder.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [AtomsBuilder]","category":"page"},{"location":"#AtomsBuilder._flexible_system-NTuple{4, Any}","page":"Home","title":"AtomsBuilder._flexible_system","text":"Helper function to convert construct a FlexibleSystem from     a list of positions, elements, cell matrix and pbc tuple \n\n\n\n\n\n","category":"method"},{"location":"#AtomsBuilder.bulk-Tuple{Symbol}","page":"Home","title":"AtomsBuilder.bulk","text":"bulk(sym) : generates a FlexibleSystem unit cell for a bulk crystal structure. If sym is a chemical symbol then the phase and lattice constant are taken from a database that is consistent with ASE. Optional alternative values can be chosen via the kwargs a, b or c to specify the lattice constants.\n\n\n\n\n\n","category":"method"},{"location":"#AtomsBuilder.load_from_pubchem-Tuple{Int64}","page":"Home","title":"AtomsBuilder.load_from_pubchem","text":"load_from_pubchem(cid::Int)\nload_from_pubchem(name::AbstractString)\nload_from_pubchem(;smiles::AbstractString)\n\nLoad a molecule from PubChem.\n\nYou can use PubChemCrawler to search for cid.\n\nExample\n\nusing AtomsBuilder\n\n# using trivial name\nload_from_pubchem( \"water\" )\n\n# using CID\nload_from_pubchem( 887 )\n\n# using SMILES\nload_from_pubchem( smiles=\"CC(=O)C\" )\n\n# using CAS number\nload_from_pubchem( \"64-17-5\" )\n\n\n\n\n\n","category":"method"},{"location":"#AtomsBuilder.randz!-Tuple{AtomsBase.FlexibleSystem, Any}","page":"Home","title":"AtomsBuilder.randz!","text":"randz!(sys::FlexibleSystem, zlist) -> sys\n\nRandomly assigns elements to the atoms in the system sys according to the probabilities given in zlist. zlist is an iterable over pairs of the form id => p where id is an atom id (e.g. atomic number or chemical symbol) and p  a probability. E.g., \n\nsys = bulk(:Ti, cubic=true) * 3\nsys = randz!(sys, [ :Ti => 0.2, :O => 0.8 ])\n\nThis function was developed mostly for generating testing  systems. It may not be suitable for generating random alloys.  PRs to improve it are welcome. \n\n\n\n\n\n","category":"method"},{"location":"#AtomsBuilder.rattle!-Tuple{AtomsBase.FlexibleSystem, Unitful.Quantity}","page":"Home","title":"AtomsBuilder.rattle!","text":"rattle!(sys, r::Union{AbstractFloat, Quantity}) -> at\n\nRandomly perturbs the atom positions within a ball of radius r. The perturbation  is uniform in angular component, and uniform in radial component. (Note this is  not the same as choosing them uniform in cartesian coordinates!). \n\nIf r is unitless, then the unit of the system is applied. \n\n\n\n\n\n","category":"method"},{"location":"#AtomsBuilder.union-Tuple{AtomsBase.FlexibleSystem, AtomsBase.FlexibleSystem}","page":"Home","title":"AtomsBuilder.union","text":"union(sys1::FlexibleSystem, sys2::FlexibleSystem)\n\ntakes the union of two particle systems provided their cells are identical. \n\n\n\n\n\n","category":"method"},{"location":"#Base.deleteat!-Tuple{AtomsBase.FlexibleSystem, Any}","page":"Home","title":"Base.deleteat!","text":"deleteat!(sys::FlexibleSystem, n) -> sys:\n\nreturns the same FlexibleSystemobjectsys, but with the atom(s) specified byn` removed.\n\n\n\n\n\n","category":"method"},{"location":"#Base.repeat-Tuple{AtomsBase.FlexibleSystem, Tuple{T, T, T} where T}","page":"Home","title":"Base.repeat","text":"repeat(at, n::NTuple{3})\nrepeat(at, n::Integer)\n\nTakes a structure and repeats it n_j times into the j-th cell-vector direction. For example,\n\nat = repeat(bulk(:C), (3,2,4))\n\ncreates 3 x 2 x 4 unit cells of carbon.\n\nThe same can be achieved by *:\n\nat = bulk(:) * (3, 2, 4)\n\n\n\n\n\n","category":"method"}]
}
